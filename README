■Java Swing GUIプログラム

	(参考ページ)
	・http://www.javadrive.jp/tutorial/ (Swingを使ってみよう)

●Swingを使ったプログラミングの基本
	まずはプログラムは書かずに座学...。

	○コンテナとコンポーネント
		・コンテナ
			Swingを使ったプログラムではベースとなるウィンドウを作成する。そしてウィンドウの中に様々な部品を追加していくことになる。
			そこでまずはベースとなるウィンドウを作成しなければならないが、Swingではフレーム、ダイアログ、アプレットの3種類を大元の
			ウィンドウとして利用することができる。
		
			フレームはJFrameクラス、ダイアログはJDialogクラス、アプレットはJAppletクラスで定義されており、こららのクラスからオブジ
			ェクトを作成することで土台が作成される。これらはContainerクラスのサブクラスとして定義されている。
		
			Swingでは他のコンポーネントを追加することできるオブジェクトをコンテナと呼んでおり、特にこの3つのクラスのオブジェクトは
			トップレベルコンテナと呼ばれる。
		
			下記はトップレベルコンテナの一つであるJFrameクラスのオブジェクトを作成している。

				JFrame frame = new JFrame();

		・コンポーネント
			トップレベルコンテナを作成したら、次にコンポーネントを作成してトップレベルコンテナに追加していく。
			コンポーネントはJComponentクラスのサブクラスとして定義されており、ボタンやラベルなど用途に応じて数多くのクラスが定義されている。

			例えばコンポーネントの一つでありボタンを作成するためのクラスであるJButtonクラスのオブジェクトを作成してフレームに追加
			するには次のように記述する。

				JFrame frame = new JFrame();

				JButton button = new JButton();
				frame.add(button);


			Swingのアプリケーションではこのようにコンテナを作成し、部品となるコンポーネントを追加していくことになる。

			なお全てのコンポーネントの親クラスであるJComponentクラスもContainerクラスのサブクラスとなっている。
			その為、コンポーネントの中には他のコンポーネントを追加することできるコンテナとしての機能を持つものもある。
			(ただしトップレベルコンテナにはなれないので、アプリケーションの大元としては使う事ができない。)

			例えばパネルを作成するためのクラスであるJPanelでは他のコンポーネントを追加することができる。

				JFrame frame = new JFrame();
				
				JPanel panel = new JPanel();
				
				JButton button = new JButton("O.K.");
				panel.add(button);
				
				frame.add(panel);
				
			上記では作成したパネルにボタンを追加し、そしてボタンが追加されるパネルをフレームに追加している。
			このようなコンテナとしての機能を持つコンポーネントは、他のコンポーネントにスクロール機能を付けるものや、
			タブによって表示するコンポーネントを切り替える機能を持つものなどがありる。




	○レイアウトマネージャーによるコンポーネントの配置
		ボタンやラベルなどのコンポーネントをフレームなどの追加していく場合、どのように各コンポーネントを配置していくのかについて確認する。

		・レイアウトマネージャーを使う
			配置の方法の一つとしては各コンポーネントのサイズを計算し、位置をピクセル単位で指定して配置していく方法がある。
			しかし、この方法は常に同じ形にレイアウトすることが可能になるが、配置する位置の細かい計算などが必要。

			そこでJavaではレイアウトマネージャーと呼ばれるものを使ってコンテナにコンポーネントを配置する。
			コンテナに対して用意されたレイアウトマネージャーの一つを設定し、後はコンテナにコンポーネントを追加するだけ。
			するとコンテナに設定されたレイアウトマネージャーによって、どこにコンポーネントが配置されるのが自動的に決まる。

			ピクセル単位で位置の指定はできないが、その代わり自動的に適切な位置を計算してくれるので事前の細かい設計が不要。
			またOSが異なっても環境に合わせて自動的に調整を行ってくれる。


		・レイアウトマネージャーの役割
			レイアウトマネージャーは数種類用意されており、どういった構成にしたいのかによって選ぶことができる。
			例えば横一列に順にコンポーネントを配置したい場合、または格子状に配置したい場合など目的に合ったレイアウトマネージャーを
			選択しコンテナに設定する。

			例えばフレームの下部にボタンを横一列に並べたい場合にはFlowLayoutと呼ばれるレイアウトマネージャーが適している。 
			FlowLayoutはコンポーネントを追加した順に右へ右へと追加していくレイアウトマネージャーである。またこのレイアウトマネージャ
			ーは追加されるコンポーネントのサイズを自動調整しない。

			また画面全体の大まかなレイアウトを行いたい場合にはBorderLayoutと呼ばれるレイアウトマネージャーが適している。 
			BorderLayoutは画面全体を5つの領域に分ける。そして各領域にコンポーネントを配置していきく。コンポーネントを追加する時はどの
			位置に配置したいのかを合わせて指定しなければならない。このレイアウトマネージャーの場合には追加されるコンポーネントのサイズ
			を自動的に調整します。


			このようにレイアウトマネージャーをコンテナに設定すると、追加されたコンポーネントがどのように配置されるのか、そして配置される
			コンポーネントのサイズをどうするのかが決まる。


		・レイアウトマネージャーの組み合わせ
			1つのアプリケーションで1つのレイアウトマネージャーしか選択できないのではレイアウトの自由度は極めて制限されてしまうが、
			レイアウトマネージャーはコンテナ毎に設定することができる。

			コンテナはフレームなどトップレベルのものだけではなく、コンポーネントとして追加するものの中にもコンテナの機能を持ったものが
			あるので、異なるレイアウトマネージャーを設定したコンテナをフレームに追加していくことでより複雑なレイアウトを行うことができる。






	○イベントを使った処理の実行
		・イベント処理
			フレーム上に配置されたボタンが押された時に何らかの処理を実行したい場合、イベントと呼ばれる機能を使う。

			アプリケーションは様々なコンポーネントから構成されているが、コンポーネントの上をマウスが動いたり、キーボードから文字が入力されたりと
			利用者が何らかの操作を行った時に、その操作に応じてイベントと呼ばれるものを発行する。
			イベントはコンポーネント毎に発行されるし、利用者の様々な操作に応じて別々のイベントが発行されるため数多くのイベントが常に発行されている。

			数多く発行されるイベントに対して全て処理する必要はない。例えばボタンがクリックされたことだけを知りたいのであれば、
			そのイベントだけを受け取るように設定しておく。受け取るように設定しなかったイベントは発行されてもどんどん捨てられていくことになる。
			後はイベントを受け取った時に実行する処理を記述しておくだけ。これでボタンが押されたら、何らかの特殊な処理を実行することが可能になる。

			この仕組みの便利なところは、利用者の操作に応じてイベントが発行されるところは何もプログラムをする必要がなく、
			プログラムする箇所としては受け取りたいイベントを指定し、そのイベントを受け取った時に実行する処理を記述するだけで済むこと。
			このような仕組みをイベント処理という。
